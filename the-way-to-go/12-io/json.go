package main

import (
	"encoding/json"
	"fmt"
)

type Address struct {
	Type, City, Country string
}

type VCard struct {
	FirstName string
	LastName  string
	Addresses []*Address
	Remark    string
}

func main() {
	fmt.Printf("Hello io \n")
	a := 111

	// a val= 111, T=int
	fmt.Printf("a val= %#v, T=%T \n", a, a)

	pa := &Address{"private", "Aarselaar", "Belgium"}
	wa := &Address{"work", "Boom", "belgium"}
	vc := VCard{
		FirstName: "Jan",
		LastName:  "Kerss",
		Addresses: []*Address{pa, wa},
		Remark:    "none",
	}

	// vc val= main.VCard{FirstName:"Jan", LastName:"Kerss", Addresses:[]*main.Address{(*main.Address)(0xc0000c6390), (*main.Address)(0xc0000c63c0)}, Remark:"none"}, T=main.VCard
	fmt.Printf("vc val= %#v, T=%T \n", vc, vc)

	js, _ := json.Marshal(vc)
	// js val= []byte{0x7b, 0x22, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4a, 0x61, 0x6e, 0x22, 0x2c, 0x22, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x4b, 0x65, 0x72, 0x73, 0x73, 0x22, 0x2c, 0x22, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x22, 0x43, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x22, 0x41, 0x61, 0x72, 0x73, 0x65, 0x6c, 0x61, 0x61, 0x72, 0x22, 0x2c, 0x22, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3a, 0x22, 0x42, 0x65, 0x6c, 0x67, 0x69, 0x75, 0x6d, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x2c, 0x22, 0x43, 0x69, 0x74, 0x79, 0x22, 0x3a, 0x22, 0x42, 0x6f, 0x6f, 0x6d, 0x22, 0x2c, 0x22, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x3a, 0x22, 0x62, 0x65, 0x6c, 0x67, 0x69, 0x75, 0x6d, 0x22, 0x7d, 0x5d, 0x2c, 0x22, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x3a, 0x22, 0x6e, 0x6f, 0x6e, 0x65, 0x22, 0x7d}, T=[]uint8
	fmt.Printf("js val= %#v, T=%T \n", js, js)

	// JSON format: {"FirstName":"Jan","LastName":"Kerss","Addresses":[{"Type":"private","City":"Aarselaar","Country":"Belgium"},{"Type":"work","City":"Boom","Country":"belgium"}],"Remark":"none"}
	fmt.Printf("JSON format: %s \n", js)

	var mapVCard interface {
	}
	json.Unmarshal(js, &mapVCard)

	var mapVCard2 VCard
	json.Unmarshal(js, &mapVCard2)
	// mapVCard val= map[Addresses:[map[City:Aarselaar Country:Belgium Type:private] map[City:Boom Country:belgium Type:work]] FirstName:Jan LastName:Kerss Remark:none], T=map[string]interface {}
	fmt.Printf("mapVCard val= %v, T=%T \n", mapVCard, mapVCard)
	fmt.Printf("mapVCard2 val= %v, T=%T \n", mapVCard2.FirstName, mapVCard2)

	/*m := mapVCard.(map[string]interface{})
	for k, v := range m {
		switch vv := v.(type) {
		case string:
			fmt.Println(k, "is string", vv)
		case int:
			fmt.Println(k, "is int", vv)
		case []interface{}:
			fmt.Println(k, "is array", vv)
			for i, u := range vv {
				fmt.Println(i, u)
			}
		default:
			println(k, "is of a type can't handle ")

		}
	}*/

}
